// Code generated by Prisma (prisma@1.23.0-test.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  interest: (where?: InterestWhereInput) => Promise<boolean>;
  note: (where?: NoteWhereInput) => Promise<boolean>;
  noteResponse: (where?: NoteResponseWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  interest: (where: InterestWhereUniqueInput) => InterestNullablePromise;
  interests: (args?: {
    where?: InterestWhereInput;
    orderBy?: InterestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Interest>;
  interestsConnection: (args?: {
    where?: InterestWhereInput;
    orderBy?: InterestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => InterestConnectionPromise;
  note: (where: NoteWhereUniqueInput) => NoteNullablePromise;
  notes: (args?: {
    where?: NoteWhereInput;
    orderBy?: NoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Note>;
  notesConnection: (args?: {
    where?: NoteWhereInput;
    orderBy?: NoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => NoteConnectionPromise;
  noteResponse: (
    where: NoteResponseWhereUniqueInput
  ) => NoteResponseNullablePromise;
  noteResponses: (args?: {
    where?: NoteResponseWhereInput;
    orderBy?: NoteResponseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<NoteResponse>;
  noteResponsesConnection: (args?: {
    where?: NoteResponseWhereInput;
    orderBy?: NoteResponseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => NoteResponseConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createInterest: (data: InterestCreateInput) => InterestPromise;
  updateInterest: (args: {
    data: InterestUpdateInput;
    where: InterestWhereUniqueInput;
  }) => InterestPromise;
  updateManyInterests: (args: {
    data: InterestUpdateManyMutationInput;
    where?: InterestWhereInput;
  }) => BatchPayloadPromise;
  upsertInterest: (args: {
    where: InterestWhereUniqueInput;
    create: InterestCreateInput;
    update: InterestUpdateInput;
  }) => InterestPromise;
  deleteInterest: (where: InterestWhereUniqueInput) => InterestPromise;
  deleteManyInterests: (where?: InterestWhereInput) => BatchPayloadPromise;
  createNote: (data: NoteCreateInput) => NotePromise;
  updateNote: (args: {
    data: NoteUpdateInput;
    where: NoteWhereUniqueInput;
  }) => NotePromise;
  updateManyNotes: (args: {
    data: NoteUpdateManyMutationInput;
    where?: NoteWhereInput;
  }) => BatchPayloadPromise;
  upsertNote: (args: {
    where: NoteWhereUniqueInput;
    create: NoteCreateInput;
    update: NoteUpdateInput;
  }) => NotePromise;
  deleteNote: (where: NoteWhereUniqueInput) => NotePromise;
  deleteManyNotes: (where?: NoteWhereInput) => BatchPayloadPromise;
  createNoteResponse: (data: NoteResponseCreateInput) => NoteResponsePromise;
  updateNoteResponse: (args: {
    data: NoteResponseUpdateInput;
    where: NoteResponseWhereUniqueInput;
  }) => NoteResponsePromise;
  updateManyNoteResponses: (args: {
    data: NoteResponseUpdateManyMutationInput;
    where?: NoteResponseWhereInput;
  }) => BatchPayloadPromise;
  upsertNoteResponse: (args: {
    where: NoteResponseWhereUniqueInput;
    create: NoteResponseCreateInput;
    update: NoteResponseUpdateInput;
  }) => NoteResponsePromise;
  deleteNoteResponse: (
    where: NoteResponseWhereUniqueInput
  ) => NoteResponsePromise;
  deleteManyNoteResponses: (
    where?: NoteResponseWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  interest: (
    where?: InterestSubscriptionWhereInput
  ) => InterestSubscriptionPayloadSubscription;
  note: (
    where?: NoteSubscriptionWhereInput
  ) => NoteSubscriptionPayloadSubscription;
  noteResponse: (
    where?: NoteResponseSubscriptionWhereInput
  ) => NoteResponseSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type NoteOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "message_ASC"
  | "message_DESC"
  | "fontFamily_ASC"
  | "fontFamily_DESC"
  | "fontColor_ASC"
  | "fontColor_DESC"
  | "backgroundColor_ASC"
  | "backgroundColor_DESC";

export type InterestOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "password_ASC"
  | "password_DESC"
  | "avatar_ASC"
  | "avatar_DESC"
  | "username_ASC"
  | "username_DESC"
  | "country_ASC"
  | "country_DESC"
  | "city_ASC"
  | "city_DESC";

export type NoteResponseOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "message_ASC"
  | "message_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface NoteUpdateInput {
  message?: Maybe<String>;
  author?: Maybe<UserUpdateOneRequiredInput>;
  seenBy?: Maybe<UserUpdateManyInput>;
  topic?: Maybe<InterestUpdateManyInput>;
  responses?: Maybe<NoteResponseUpdateManyInput>;
  fontFamily?: Maybe<String>;
  fontColor?: Maybe<String>;
  backgroundColor?: Maybe<String>;
}

export type InterestWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface InterestUpdateManyMutationInput {
  title?: Maybe<String>;
}

export interface InterestUpdateManyWithWhereNestedInput {
  where: InterestScalarWhereInput;
  data: InterestUpdateManyDataInput;
}

export interface NoteResponseUpdateDataInput {
  message?: Maybe<String>;
  author?: Maybe<UserUpdateOneRequiredInput>;
}

export interface NoteUpdateWithWhereUniqueNestedInput {
  where: NoteWhereUniqueInput;
  data: NoteUpdateDataInput;
}

export interface NoteResponseUpdateWithWhereUniqueNestedInput {
  where: NoteResponseWhereUniqueInput;
  data: NoteResponseUpdateDataInput;
}

export interface NoteResponseSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<NoteResponseWhereInput>;
  AND?: Maybe<
    NoteResponseSubscriptionWhereInput[] | NoteResponseSubscriptionWhereInput
  >;
  OR?: Maybe<
    NoteResponseSubscriptionWhereInput[] | NoteResponseSubscriptionWhereInput
  >;
  NOT?: Maybe<
    NoteResponseSubscriptionWhereInput[] | NoteResponseSubscriptionWhereInput
  >;
}

export interface NoteCreateInput {
  id?: Maybe<ID_Input>;
  message: String;
  author: UserCreateOneInput;
  seenBy?: Maybe<UserCreateManyInput>;
  topic?: Maybe<InterestCreateManyInput>;
  responses?: Maybe<NoteResponseCreateManyInput>;
  fontFamily: String;
  fontColor: String;
  backgroundColor: String;
}

export type NoteWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateManyMutationInput {
  password?: Maybe<String>;
  avatar?: Maybe<String>;
  username?: Maybe<String>;
  country?: Maybe<String>;
  city?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  password: String;
  avatar: String;
  username: String;
  country: String;
  city: String;
  sentNotes?: Maybe<NoteCreateManyInput>;
  favoriteNotes?: Maybe<NoteCreateManyInput>;
  interests?: Maybe<InterestCreateManyInput>;
}

export interface NoteWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  message?: Maybe<String>;
  message_not?: Maybe<String>;
  message_in?: Maybe<String[] | String>;
  message_not_in?: Maybe<String[] | String>;
  message_lt?: Maybe<String>;
  message_lte?: Maybe<String>;
  message_gt?: Maybe<String>;
  message_gte?: Maybe<String>;
  message_contains?: Maybe<String>;
  message_not_contains?: Maybe<String>;
  message_starts_with?: Maybe<String>;
  message_not_starts_with?: Maybe<String>;
  message_ends_with?: Maybe<String>;
  message_not_ends_with?: Maybe<String>;
  author?: Maybe<UserWhereInput>;
  seenBy_every?: Maybe<UserWhereInput>;
  seenBy_some?: Maybe<UserWhereInput>;
  seenBy_none?: Maybe<UserWhereInput>;
  topic_every?: Maybe<InterestWhereInput>;
  topic_some?: Maybe<InterestWhereInput>;
  topic_none?: Maybe<InterestWhereInput>;
  responses_every?: Maybe<NoteResponseWhereInput>;
  responses_some?: Maybe<NoteResponseWhereInput>;
  responses_none?: Maybe<NoteResponseWhereInput>;
  fontFamily?: Maybe<String>;
  fontFamily_not?: Maybe<String>;
  fontFamily_in?: Maybe<String[] | String>;
  fontFamily_not_in?: Maybe<String[] | String>;
  fontFamily_lt?: Maybe<String>;
  fontFamily_lte?: Maybe<String>;
  fontFamily_gt?: Maybe<String>;
  fontFamily_gte?: Maybe<String>;
  fontFamily_contains?: Maybe<String>;
  fontFamily_not_contains?: Maybe<String>;
  fontFamily_starts_with?: Maybe<String>;
  fontFamily_not_starts_with?: Maybe<String>;
  fontFamily_ends_with?: Maybe<String>;
  fontFamily_not_ends_with?: Maybe<String>;
  fontColor?: Maybe<String>;
  fontColor_not?: Maybe<String>;
  fontColor_in?: Maybe<String[] | String>;
  fontColor_not_in?: Maybe<String[] | String>;
  fontColor_lt?: Maybe<String>;
  fontColor_lte?: Maybe<String>;
  fontColor_gt?: Maybe<String>;
  fontColor_gte?: Maybe<String>;
  fontColor_contains?: Maybe<String>;
  fontColor_not_contains?: Maybe<String>;
  fontColor_starts_with?: Maybe<String>;
  fontColor_not_starts_with?: Maybe<String>;
  fontColor_ends_with?: Maybe<String>;
  fontColor_not_ends_with?: Maybe<String>;
  backgroundColor?: Maybe<String>;
  backgroundColor_not?: Maybe<String>;
  backgroundColor_in?: Maybe<String[] | String>;
  backgroundColor_not_in?: Maybe<String[] | String>;
  backgroundColor_lt?: Maybe<String>;
  backgroundColor_lte?: Maybe<String>;
  backgroundColor_gt?: Maybe<String>;
  backgroundColor_gte?: Maybe<String>;
  backgroundColor_contains?: Maybe<String>;
  backgroundColor_not_contains?: Maybe<String>;
  backgroundColor_starts_with?: Maybe<String>;
  backgroundColor_not_starts_with?: Maybe<String>;
  backgroundColor_ends_with?: Maybe<String>;
  backgroundColor_not_ends_with?: Maybe<String>;
  AND?: Maybe<NoteWhereInput[] | NoteWhereInput>;
  OR?: Maybe<NoteWhereInput[] | NoteWhereInput>;
  NOT?: Maybe<NoteWhereInput[] | NoteWhereInput>;
}

export interface NoteCreateManyInput {
  create?: Maybe<NoteCreateInput[] | NoteCreateInput>;
  connect?: Maybe<NoteWhereUniqueInput[] | NoteWhereUniqueInput>;
}

export interface NoteResponseWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  message?: Maybe<String>;
  message_not?: Maybe<String>;
  message_in?: Maybe<String[] | String>;
  message_not_in?: Maybe<String[] | String>;
  message_lt?: Maybe<String>;
  message_lte?: Maybe<String>;
  message_gt?: Maybe<String>;
  message_gte?: Maybe<String>;
  message_contains?: Maybe<String>;
  message_not_contains?: Maybe<String>;
  message_starts_with?: Maybe<String>;
  message_not_starts_with?: Maybe<String>;
  message_ends_with?: Maybe<String>;
  message_not_ends_with?: Maybe<String>;
  author?: Maybe<UserWhereInput>;
  AND?: Maybe<NoteResponseWhereInput[] | NoteResponseWhereInput>;
  OR?: Maybe<NoteResponseWhereInput[] | NoteResponseWhereInput>;
  NOT?: Maybe<NoteResponseWhereInput[] | NoteResponseWhereInput>;
}

export interface InterestCreateManyInput {
  create?: Maybe<InterestCreateInput[] | InterestCreateInput>;
  connect?: Maybe<InterestWhereUniqueInput[] | InterestWhereUniqueInput>;
}

export interface InterestWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  AND?: Maybe<InterestWhereInput[] | InterestWhereInput>;
  OR?: Maybe<InterestWhereInput[] | InterestWhereInput>;
  NOT?: Maybe<InterestWhereInput[] | InterestWhereInput>;
}

export interface UserCreateManyInput {
  create?: Maybe<UserCreateInput[] | UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface NoteUpdateManyMutationInput {
  message?: Maybe<String>;
  fontFamily?: Maybe<String>;
  fontColor?: Maybe<String>;
  backgroundColor?: Maybe<String>;
}

export interface NoteResponseCreateManyInput {
  create?: Maybe<NoteResponseCreateInput[] | NoteResponseCreateInput>;
  connect?: Maybe<
    NoteResponseWhereUniqueInput[] | NoteResponseWhereUniqueInput
  >;
}

export interface NoteUpdateManyDataInput {
  message?: Maybe<String>;
  fontFamily?: Maybe<String>;
  fontColor?: Maybe<String>;
  backgroundColor?: Maybe<String>;
}

export interface NoteResponseCreateInput {
  id?: Maybe<ID_Input>;
  message: String;
  author: UserCreateOneInput;
}

export type NoteResponseWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface NoteResponseUpdateManyInput {
  create?: Maybe<NoteResponseCreateInput[] | NoteResponseCreateInput>;
  update?: Maybe<
    | NoteResponseUpdateWithWhereUniqueNestedInput[]
    | NoteResponseUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | NoteResponseUpsertWithWhereUniqueNestedInput[]
    | NoteResponseUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<NoteResponseWhereUniqueInput[] | NoteResponseWhereUniqueInput>;
  connect?: Maybe<
    NoteResponseWhereUniqueInput[] | NoteResponseWhereUniqueInput
  >;
  set?: Maybe<NoteResponseWhereUniqueInput[] | NoteResponseWhereUniqueInput>;
  disconnect?: Maybe<
    NoteResponseWhereUniqueInput[] | NoteResponseWhereUniqueInput
  >;
  deleteMany?: Maybe<
    NoteResponseScalarWhereInput[] | NoteResponseScalarWhereInput
  >;
  updateMany?: Maybe<
    | NoteResponseUpdateManyWithWhereNestedInput[]
    | NoteResponseUpdateManyWithWhereNestedInput
  >;
}

export interface NoteUpsertWithWhereUniqueNestedInput {
  where: NoteWhereUniqueInput;
  update: NoteUpdateDataInput;
  create: NoteCreateInput;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserUpdateDataInput {
  password?: Maybe<String>;
  avatar?: Maybe<String>;
  username?: Maybe<String>;
  country?: Maybe<String>;
  city?: Maybe<String>;
  sentNotes?: Maybe<NoteUpdateManyInput>;
  favoriteNotes?: Maybe<NoteUpdateManyInput>;
  interests?: Maybe<InterestUpdateManyInput>;
}

export interface NoteResponseScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  message?: Maybe<String>;
  message_not?: Maybe<String>;
  message_in?: Maybe<String[] | String>;
  message_not_in?: Maybe<String[] | String>;
  message_lt?: Maybe<String>;
  message_lte?: Maybe<String>;
  message_gt?: Maybe<String>;
  message_gte?: Maybe<String>;
  message_contains?: Maybe<String>;
  message_not_contains?: Maybe<String>;
  message_starts_with?: Maybe<String>;
  message_not_starts_with?: Maybe<String>;
  message_ends_with?: Maybe<String>;
  message_not_ends_with?: Maybe<String>;
  AND?: Maybe<NoteResponseScalarWhereInput[] | NoteResponseScalarWhereInput>;
  OR?: Maybe<NoteResponseScalarWhereInput[] | NoteResponseScalarWhereInput>;
  NOT?: Maybe<NoteResponseScalarWhereInput[] | NoteResponseScalarWhereInput>;
}

export interface NoteUpdateManyInput {
  create?: Maybe<NoteCreateInput[] | NoteCreateInput>;
  update?: Maybe<
    | NoteUpdateWithWhereUniqueNestedInput[]
    | NoteUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | NoteUpsertWithWhereUniqueNestedInput[]
    | NoteUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<NoteWhereUniqueInput[] | NoteWhereUniqueInput>;
  connect?: Maybe<NoteWhereUniqueInput[] | NoteWhereUniqueInput>;
  set?: Maybe<NoteWhereUniqueInput[] | NoteWhereUniqueInput>;
  disconnect?: Maybe<NoteWhereUniqueInput[] | NoteWhereUniqueInput>;
  deleteMany?: Maybe<NoteScalarWhereInput[] | NoteScalarWhereInput>;
  updateMany?: Maybe<
    NoteUpdateManyWithWhereNestedInput[] | NoteUpdateManyWithWhereNestedInput
  >;
}

export interface InterestUpdateInput {
  title?: Maybe<String>;
}

export interface InterestUpdateManyDataInput {
  title?: Maybe<String>;
}

export interface NoteSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<NoteWhereInput>;
  AND?: Maybe<NoteSubscriptionWhereInput[] | NoteSubscriptionWhereInput>;
  OR?: Maybe<NoteSubscriptionWhereInput[] | NoteSubscriptionWhereInput>;
  NOT?: Maybe<NoteSubscriptionWhereInput[] | NoteSubscriptionWhereInput>;
}

export interface NoteUpdateDataInput {
  message?: Maybe<String>;
  author?: Maybe<UserUpdateOneRequiredInput>;
  seenBy?: Maybe<UserUpdateManyInput>;
  topic?: Maybe<InterestUpdateManyInput>;
  responses?: Maybe<NoteResponseUpdateManyInput>;
  fontFamily?: Maybe<String>;
  fontColor?: Maybe<String>;
  backgroundColor?: Maybe<String>;
}

export interface UserUpdateInput {
  password?: Maybe<String>;
  avatar?: Maybe<String>;
  username?: Maybe<String>;
  country?: Maybe<String>;
  city?: Maybe<String>;
  sentNotes?: Maybe<NoteUpdateManyInput>;
  favoriteNotes?: Maybe<NoteUpdateManyInput>;
  interests?: Maybe<InterestUpdateManyInput>;
}

export interface UserUpdateManyInput {
  create?: Maybe<UserCreateInput[] | UserCreateInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueNestedInput[]
    | UserUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueNestedInput[]
    | UserUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface NoteResponseUpdateManyMutationInput {
  message?: Maybe<String>;
}

export interface UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  data: UserUpdateDataInput;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface NoteScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  message?: Maybe<String>;
  message_not?: Maybe<String>;
  message_in?: Maybe<String[] | String>;
  message_not_in?: Maybe<String[] | String>;
  message_lt?: Maybe<String>;
  message_lte?: Maybe<String>;
  message_gt?: Maybe<String>;
  message_gte?: Maybe<String>;
  message_contains?: Maybe<String>;
  message_not_contains?: Maybe<String>;
  message_starts_with?: Maybe<String>;
  message_not_starts_with?: Maybe<String>;
  message_ends_with?: Maybe<String>;
  message_not_ends_with?: Maybe<String>;
  fontFamily?: Maybe<String>;
  fontFamily_not?: Maybe<String>;
  fontFamily_in?: Maybe<String[] | String>;
  fontFamily_not_in?: Maybe<String[] | String>;
  fontFamily_lt?: Maybe<String>;
  fontFamily_lte?: Maybe<String>;
  fontFamily_gt?: Maybe<String>;
  fontFamily_gte?: Maybe<String>;
  fontFamily_contains?: Maybe<String>;
  fontFamily_not_contains?: Maybe<String>;
  fontFamily_starts_with?: Maybe<String>;
  fontFamily_not_starts_with?: Maybe<String>;
  fontFamily_ends_with?: Maybe<String>;
  fontFamily_not_ends_with?: Maybe<String>;
  fontColor?: Maybe<String>;
  fontColor_not?: Maybe<String>;
  fontColor_in?: Maybe<String[] | String>;
  fontColor_not_in?: Maybe<String[] | String>;
  fontColor_lt?: Maybe<String>;
  fontColor_lte?: Maybe<String>;
  fontColor_gt?: Maybe<String>;
  fontColor_gte?: Maybe<String>;
  fontColor_contains?: Maybe<String>;
  fontColor_not_contains?: Maybe<String>;
  fontColor_starts_with?: Maybe<String>;
  fontColor_not_starts_with?: Maybe<String>;
  fontColor_ends_with?: Maybe<String>;
  fontColor_not_ends_with?: Maybe<String>;
  backgroundColor?: Maybe<String>;
  backgroundColor_not?: Maybe<String>;
  backgroundColor_in?: Maybe<String[] | String>;
  backgroundColor_not_in?: Maybe<String[] | String>;
  backgroundColor_lt?: Maybe<String>;
  backgroundColor_lte?: Maybe<String>;
  backgroundColor_gt?: Maybe<String>;
  backgroundColor_gte?: Maybe<String>;
  backgroundColor_contains?: Maybe<String>;
  backgroundColor_not_contains?: Maybe<String>;
  backgroundColor_starts_with?: Maybe<String>;
  backgroundColor_not_starts_with?: Maybe<String>;
  backgroundColor_ends_with?: Maybe<String>;
  backgroundColor_not_ends_with?: Maybe<String>;
  AND?: Maybe<NoteScalarWhereInput[] | NoteScalarWhereInput>;
  OR?: Maybe<NoteScalarWhereInput[] | NoteScalarWhereInput>;
  NOT?: Maybe<NoteScalarWhereInput[] | NoteScalarWhereInput>;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  avatar?: Maybe<String>;
  avatar_not?: Maybe<String>;
  avatar_in?: Maybe<String[] | String>;
  avatar_not_in?: Maybe<String[] | String>;
  avatar_lt?: Maybe<String>;
  avatar_lte?: Maybe<String>;
  avatar_gt?: Maybe<String>;
  avatar_gte?: Maybe<String>;
  avatar_contains?: Maybe<String>;
  avatar_not_contains?: Maybe<String>;
  avatar_starts_with?: Maybe<String>;
  avatar_not_starts_with?: Maybe<String>;
  avatar_ends_with?: Maybe<String>;
  avatar_not_ends_with?: Maybe<String>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  country?: Maybe<String>;
  country_not?: Maybe<String>;
  country_in?: Maybe<String[] | String>;
  country_not_in?: Maybe<String[] | String>;
  country_lt?: Maybe<String>;
  country_lte?: Maybe<String>;
  country_gt?: Maybe<String>;
  country_gte?: Maybe<String>;
  country_contains?: Maybe<String>;
  country_not_contains?: Maybe<String>;
  country_starts_with?: Maybe<String>;
  country_not_starts_with?: Maybe<String>;
  country_ends_with?: Maybe<String>;
  country_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface NoteResponseUpdateManyWithWhereNestedInput {
  where: NoteResponseScalarWhereInput;
  data: NoteResponseUpdateManyDataInput;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface InterestCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
}

export interface UserUpdateManyDataInput {
  password?: Maybe<String>;
  avatar?: Maybe<String>;
  username?: Maybe<String>;
  country?: Maybe<String>;
  city?: Maybe<String>;
}

export interface InterestSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<InterestWhereInput>;
  AND?: Maybe<
    InterestSubscriptionWhereInput[] | InterestSubscriptionWhereInput
  >;
  OR?: Maybe<InterestSubscriptionWhereInput[] | InterestSubscriptionWhereInput>;
  NOT?: Maybe<
    InterestSubscriptionWhereInput[] | InterestSubscriptionWhereInput
  >;
}

export interface InterestUpdateManyInput {
  create?: Maybe<InterestCreateInput[] | InterestCreateInput>;
  update?: Maybe<
    | InterestUpdateWithWhereUniqueNestedInput[]
    | InterestUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | InterestUpsertWithWhereUniqueNestedInput[]
    | InterestUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<InterestWhereUniqueInput[] | InterestWhereUniqueInput>;
  connect?: Maybe<InterestWhereUniqueInput[] | InterestWhereUniqueInput>;
  set?: Maybe<InterestWhereUniqueInput[] | InterestWhereUniqueInput>;
  disconnect?: Maybe<InterestWhereUniqueInput[] | InterestWhereUniqueInput>;
  deleteMany?: Maybe<InterestScalarWhereInput[] | InterestScalarWhereInput>;
  updateMany?: Maybe<
    | InterestUpdateManyWithWhereNestedInput[]
    | InterestUpdateManyWithWhereNestedInput
  >;
}

export interface NoteResponseUpdateInput {
  message?: Maybe<String>;
  author?: Maybe<UserUpdateOneRequiredInput>;
}

export interface InterestScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  AND?: Maybe<InterestScalarWhereInput[] | InterestScalarWhereInput>;
  OR?: Maybe<InterestScalarWhereInput[] | InterestScalarWhereInput>;
  NOT?: Maybe<InterestScalarWhereInput[] | InterestScalarWhereInput>;
}

export interface InterestUpsertWithWhereUniqueNestedInput {
  where: InterestWhereUniqueInput;
  update: InterestUpdateDataInput;
  create: InterestCreateInput;
}

export interface InterestUpdateDataInput {
  title?: Maybe<String>;
}

export interface InterestUpdateWithWhereUniqueNestedInput {
  where: InterestWhereUniqueInput;
  data: InterestUpdateDataInput;
}

export interface NoteUpdateManyWithWhereNestedInput {
  where: NoteScalarWhereInput;
  data: NoteUpdateManyDataInput;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  avatar?: Maybe<String>;
  avatar_not?: Maybe<String>;
  avatar_in?: Maybe<String[] | String>;
  avatar_not_in?: Maybe<String[] | String>;
  avatar_lt?: Maybe<String>;
  avatar_lte?: Maybe<String>;
  avatar_gt?: Maybe<String>;
  avatar_gte?: Maybe<String>;
  avatar_contains?: Maybe<String>;
  avatar_not_contains?: Maybe<String>;
  avatar_starts_with?: Maybe<String>;
  avatar_not_starts_with?: Maybe<String>;
  avatar_ends_with?: Maybe<String>;
  avatar_not_ends_with?: Maybe<String>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  country?: Maybe<String>;
  country_not?: Maybe<String>;
  country_in?: Maybe<String[] | String>;
  country_not_in?: Maybe<String[] | String>;
  country_lt?: Maybe<String>;
  country_lte?: Maybe<String>;
  country_gt?: Maybe<String>;
  country_gte?: Maybe<String>;
  country_contains?: Maybe<String>;
  country_not_contains?: Maybe<String>;
  country_starts_with?: Maybe<String>;
  country_not_starts_with?: Maybe<String>;
  country_ends_with?: Maybe<String>;
  country_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  sentNotes_every?: Maybe<NoteWhereInput>;
  sentNotes_some?: Maybe<NoteWhereInput>;
  sentNotes_none?: Maybe<NoteWhereInput>;
  favoriteNotes_every?: Maybe<NoteWhereInput>;
  favoriteNotes_some?: Maybe<NoteWhereInput>;
  favoriteNotes_none?: Maybe<NoteWhereInput>;
  interests_every?: Maybe<InterestWhereInput>;
  interests_some?: Maybe<InterestWhereInput>;
  interests_none?: Maybe<InterestWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NoteResponseUpsertWithWhereUniqueNestedInput {
  where: NoteResponseWhereUniqueInput;
  update: NoteResponseUpdateDataInput;
  create: NoteResponseCreateInput;
}

export interface NoteResponseUpdateManyDataInput {
  message?: Maybe<String>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  password: String;
  avatar: String;
  username: String;
  country: String;
  city: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  password: () => Promise<String>;
  avatar: () => Promise<String>;
  username: () => Promise<String>;
  country: () => Promise<String>;
  city: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  password: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
}

export interface InterestConnection {
  pageInfo: PageInfo;
  edges: InterestEdge[];
}

export interface InterestConnectionPromise
  extends Promise<InterestConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<InterestEdge>>() => T;
  aggregate: <T = AggregateInterestPromise>() => T;
}

export interface InterestConnectionSubscription
  extends Promise<AsyncIterator<InterestConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<InterestEdgeSubscription>>>() => T;
  aggregate: <T = AggregateInterestSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface InterestEdge {
  node: Interest;
  cursor: String;
}

export interface InterestEdgePromise
  extends Promise<InterestEdge>,
    Fragmentable {
  node: <T = InterestPromise>() => T;
  cursor: () => Promise<String>;
}

export interface InterestEdgeSubscription
  extends Promise<AsyncIterator<InterestEdge>>,
    Fragmentable {
  node: <T = InterestSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface NoteResponsePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  message: String;
}

export interface NoteResponsePreviousValuesPromise
  extends Promise<NoteResponsePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  message: () => Promise<String>;
}

export interface NoteResponsePreviousValuesSubscription
  extends Promise<AsyncIterator<NoteResponsePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  message: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  password: String;
  avatar: String;
  username: String;
  country: String;
  city: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  password: () => Promise<String>;
  avatar: () => Promise<String>;
  username: () => Promise<String>;
  country: () => Promise<String>;
  city: () => Promise<String>;
  sentNotes: <T = FragmentableArray<Note>>(args?: {
    where?: NoteWhereInput;
    orderBy?: NoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  favoriteNotes: <T = FragmentableArray<Note>>(args?: {
    where?: NoteWhereInput;
    orderBy?: NoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  interests: <T = FragmentableArray<Interest>>(args?: {
    where?: InterestWhereInput;
    orderBy?: InterestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  password: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  sentNotes: <T = Promise<AsyncIterator<NoteSubscription>>>(args?: {
    where?: NoteWhereInput;
    orderBy?: NoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  favoriteNotes: <T = Promise<AsyncIterator<NoteSubscription>>>(args?: {
    where?: NoteWhereInput;
    orderBy?: NoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  interests: <T = Promise<AsyncIterator<InterestSubscription>>>(args?: {
    where?: InterestWhereInput;
    orderBy?: InterestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  password: () => Promise<String>;
  avatar: () => Promise<String>;
  username: () => Promise<String>;
  country: () => Promise<String>;
  city: () => Promise<String>;
  sentNotes: <T = FragmentableArray<Note>>(args?: {
    where?: NoteWhereInput;
    orderBy?: NoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  favoriteNotes: <T = FragmentableArray<Note>>(args?: {
    where?: NoteWhereInput;
    orderBy?: NoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  interests: <T = FragmentableArray<Interest>>(args?: {
    where?: InterestWhereInput;
    orderBy?: InterestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface NoteResponseSubscriptionPayload {
  mutation: MutationType;
  node: NoteResponse;
  updatedFields: String[];
  previousValues: NoteResponsePreviousValues;
}

export interface NoteResponseSubscriptionPayloadPromise
  extends Promise<NoteResponseSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NoteResponsePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NoteResponsePreviousValuesPromise>() => T;
}

export interface NoteResponseSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NoteResponseSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NoteResponseSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NoteResponsePreviousValuesSubscription>() => T;
}

export interface AggregateNoteResponse {
  count: Int;
}

export interface AggregateNoteResponsePromise
  extends Promise<AggregateNoteResponse>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNoteResponseSubscription
  extends Promise<AsyncIterator<AggregateNoteResponse>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Note {
  id: ID_Output;
  createdAt: DateTimeOutput;
  message: String;
  fontFamily: String;
  fontColor: String;
  backgroundColor: String;
}

export interface NotePromise extends Promise<Note>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  message: () => Promise<String>;
  author: <T = UserPromise>() => T;
  seenBy: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  topic: <T = FragmentableArray<Interest>>(args?: {
    where?: InterestWhereInput;
    orderBy?: InterestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  responses: <T = FragmentableArray<NoteResponse>>(args?: {
    where?: NoteResponseWhereInput;
    orderBy?: NoteResponseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  fontFamily: () => Promise<String>;
  fontColor: () => Promise<String>;
  backgroundColor: () => Promise<String>;
}

export interface NoteSubscription
  extends Promise<AsyncIterator<Note>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  message: () => Promise<AsyncIterator<String>>;
  author: <T = UserSubscription>() => T;
  seenBy: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  topic: <T = Promise<AsyncIterator<InterestSubscription>>>(args?: {
    where?: InterestWhereInput;
    orderBy?: InterestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  responses: <T = Promise<AsyncIterator<NoteResponseSubscription>>>(args?: {
    where?: NoteResponseWhereInput;
    orderBy?: NoteResponseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  fontFamily: () => Promise<AsyncIterator<String>>;
  fontColor: () => Promise<AsyncIterator<String>>;
  backgroundColor: () => Promise<AsyncIterator<String>>;
}

export interface NoteNullablePromise
  extends Promise<Note | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  message: () => Promise<String>;
  author: <T = UserPromise>() => T;
  seenBy: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  topic: <T = FragmentableArray<Interest>>(args?: {
    where?: InterestWhereInput;
    orderBy?: InterestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  responses: <T = FragmentableArray<NoteResponse>>(args?: {
    where?: NoteResponseWhereInput;
    orderBy?: NoteResponseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  fontFamily: () => Promise<String>;
  fontColor: () => Promise<String>;
  backgroundColor: () => Promise<String>;
}

export interface NoteResponseConnection {
  pageInfo: PageInfo;
  edges: NoteResponseEdge[];
}

export interface NoteResponseConnectionPromise
  extends Promise<NoteResponseConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NoteResponseEdge>>() => T;
  aggregate: <T = AggregateNoteResponsePromise>() => T;
}

export interface NoteResponseConnectionSubscription
  extends Promise<AsyncIterator<NoteResponseConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NoteResponseEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNoteResponseSubscription>() => T;
}

export interface Interest {
  id: ID_Output;
  title: String;
}

export interface InterestPromise extends Promise<Interest>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
}

export interface InterestSubscription
  extends Promise<AsyncIterator<Interest>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
}

export interface InterestNullablePromise
  extends Promise<Interest | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
}

export interface NoteEdge {
  node: Note;
  cursor: String;
}

export interface NoteEdgePromise extends Promise<NoteEdge>, Fragmentable {
  node: <T = NotePromise>() => T;
  cursor: () => Promise<String>;
}

export interface NoteEdgeSubscription
  extends Promise<AsyncIterator<NoteEdge>>,
    Fragmentable {
  node: <T = NoteSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface InterestSubscriptionPayload {
  mutation: MutationType;
  node: Interest;
  updatedFields: String[];
  previousValues: InterestPreviousValues;
}

export interface InterestSubscriptionPayloadPromise
  extends Promise<InterestSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = InterestPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = InterestPreviousValuesPromise>() => T;
}

export interface InterestSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<InterestSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = InterestSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = InterestPreviousValuesSubscription>() => T;
}

export interface NoteResponse {
  id: ID_Output;
  createdAt: DateTimeOutput;
  message: String;
}

export interface NoteResponsePromise
  extends Promise<NoteResponse>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  message: () => Promise<String>;
  author: <T = UserPromise>() => T;
}

export interface NoteResponseSubscription
  extends Promise<AsyncIterator<NoteResponse>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  message: () => Promise<AsyncIterator<String>>;
  author: <T = UserSubscription>() => T;
}

export interface NoteResponseNullablePromise
  extends Promise<NoteResponse | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  message: () => Promise<String>;
  author: <T = UserPromise>() => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface NotePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  message: String;
  fontFamily: String;
  fontColor: String;
  backgroundColor: String;
}

export interface NotePreviousValuesPromise
  extends Promise<NotePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  message: () => Promise<String>;
  fontFamily: () => Promise<String>;
  fontColor: () => Promise<String>;
  backgroundColor: () => Promise<String>;
}

export interface NotePreviousValuesSubscription
  extends Promise<AsyncIterator<NotePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  message: () => Promise<AsyncIterator<String>>;
  fontFamily: () => Promise<AsyncIterator<String>>;
  fontColor: () => Promise<AsyncIterator<String>>;
  backgroundColor: () => Promise<AsyncIterator<String>>;
}

export interface NoteSubscriptionPayload {
  mutation: MutationType;
  node: Note;
  updatedFields: String[];
  previousValues: NotePreviousValues;
}

export interface NoteSubscriptionPayloadPromise
  extends Promise<NoteSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NotePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NotePreviousValuesPromise>() => T;
}

export interface NoteSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NoteSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NoteSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NotePreviousValuesSubscription>() => T;
}

export interface AggregateInterest {
  count: Int;
}

export interface AggregateInterestPromise
  extends Promise<AggregateInterest>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateInterestSubscription
  extends Promise<AsyncIterator<AggregateInterest>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface InterestPreviousValues {
  id: ID_Output;
  title: String;
}

export interface InterestPreviousValuesPromise
  extends Promise<InterestPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
}

export interface InterestPreviousValuesSubscription
  extends Promise<AsyncIterator<InterestPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
}

export interface NoteResponseEdge {
  node: NoteResponse;
  cursor: String;
}

export interface NoteResponseEdgePromise
  extends Promise<NoteResponseEdge>,
    Fragmentable {
  node: <T = NoteResponsePromise>() => T;
  cursor: () => Promise<String>;
}

export interface NoteResponseEdgeSubscription
  extends Promise<AsyncIterator<NoteResponseEdge>>,
    Fragmentable {
  node: <T = NoteResponseSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface NoteConnection {
  pageInfo: PageInfo;
  edges: NoteEdge[];
}

export interface NoteConnectionPromise
  extends Promise<NoteConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NoteEdge>>() => T;
  aggregate: <T = AggregateNotePromise>() => T;
}

export interface NoteConnectionSubscription
  extends Promise<AsyncIterator<NoteConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NoteEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNoteSubscription>() => T;
}

export interface AggregateNote {
  count: Int;
}

export interface AggregateNotePromise
  extends Promise<AggregateNote>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNoteSubscription
  extends Promise<AsyncIterator<AggregateNote>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Note",
    embedded: false
  },
  {
    name: "NoteResponse",
    embedded: false
  },
  {
    name: "Interest",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
